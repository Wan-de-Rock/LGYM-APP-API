// <auto-generated />
using System;
using LgymApp.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LgymApp.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LgymApp.Domain.Entities.BodyPartMeasurement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<int>("BodyPart")
                        .HasColumnType("integer")
                        .HasColumnName("body_part");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.Property<int>("WeightUnit")
                        .HasColumnType("integer")
                        .HasColumnName("weight_unit");

                    b.HasKey("Id")
                        .HasName("pk_body_part_measurements");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_body_part_measurements_user_id");

                    b.ToTable("body_part_measurements", (string)null);
                });

            modelBuilder.Entity("LgymApp.Domain.Entities.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<int>("BodyPart")
                        .HasColumnType("integer")
                        .HasColumnName("body_part");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_exercises");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_exercises_user_id");

                    b.ToTable("exercises", (string)null);
                });

            modelBuilder.Entity("LgymApp.Domain.Entities.ExerciseScore", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid")
                        .HasColumnName("exercise_id");

                    b.Property<double>("Repeats")
                        .HasColumnType("double precision")
                        .HasColumnName("repeats");

                    b.Property<int>("Series")
                        .HasColumnType("integer")
                        .HasColumnName("series");

                    b.Property<Guid>("TrainingResultId")
                        .HasColumnType("uuid")
                        .HasColumnName("training_result_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.Property<int>("WeightUnit")
                        .HasColumnType("integer")
                        .HasColumnName("weight_unit");

                    b.HasKey("Id")
                        .HasName("pk_exercise_scores");

                    b.HasIndex("ExerciseId")
                        .HasDatabaseName("ix_exercise_scores_exercise_id");

                    b.HasIndex("TrainingResultId")
                        .HasDatabaseName("ix_exercise_scores_training_result_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_exercise_scores_user_id");

                    b.ToTable("exercise_scores", (string)null);
                });

            modelBuilder.Entity("LgymApp.Domain.Entities.MainRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid")
                        .HasColumnName("exercise_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.Property<int>("WeightUnit")
                        .HasColumnType("integer")
                        .HasColumnName("weight_unit");

                    b.HasKey("Id")
                        .HasName("pk_main_records");

                    b.HasIndex("ExerciseId")
                        .IsUnique()
                        .HasDatabaseName("ix_main_records_exercise_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_main_records_user_id");

                    b.ToTable("main_records", (string)null);
                });

            modelBuilder.Entity("LgymApp.Domain.Entities.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("NumberOfTrainingDays")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_training_days");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_plans");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_plans_user_id");

                    b.ToTable("plans", (string)null);
                });

            modelBuilder.Entity("LgymApp.Domain.Entities.RecommendedNumberOfReps", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid")
                        .HasColumnName("exercise_id");

                    b.Property<string>("Repeats")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("repeats");

                    b.Property<int>("Series")
                        .HasColumnType("integer")
                        .HasColumnName("series");

                    b.Property<Guid>("TrainingPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("training_plan_id");

                    b.HasKey("Id")
                        .HasName("pk_recommended_number_of_reps");

                    b.HasIndex("ExerciseId")
                        .IsUnique()
                        .HasDatabaseName("ix_recommended_number_of_reps_exercise_id");

                    b.HasIndex("TrainingPlanId")
                        .HasDatabaseName("ix_recommended_number_of_reps_training_plan_id");

                    b.ToTable("recommended_number_of_reps", (string)null);
                });

            modelBuilder.Entity("LgymApp.Domain.Entities.TrainingPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("plan_id");

                    b.HasKey("Id")
                        .HasName("pk_training_plans");

                    b.HasIndex("PlanId")
                        .HasDatabaseName("ix_training_plans_plan_id");

                    b.ToTable("training_plans", (string)null);
                });

            modelBuilder.Entity("LgymApp.Domain.Entities.TrainingResult", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<Guid>("TrainingPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("training_plan_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_training_results");

                    b.HasIndex("TrainingPlanId")
                        .HasDatabaseName("ix_training_results_training_plan_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_training_results_user_id");

                    b.ToTable("training_results", (string)null);
                });

            modelBuilder.Entity("LgymApp.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("hashed_password");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nickname");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("LgymApp.Domain.Entities.BodyPartMeasurement", b =>
                {
                    b.HasOne("LgymApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_body_part_measurements_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LgymApp.Domain.Entities.Exercise", b =>
                {
                    b.HasOne("LgymApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_exercises_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LgymApp.Domain.Entities.ExerciseScore", b =>
                {
                    b.HasOne("LgymApp.Domain.Entities.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exercise_scores_exercises_exercise_id");

                    b.HasOne("LgymApp.Domain.Entities.TrainingResult", "TrainingResult")
                        .WithMany("ExercisesScores")
                        .HasForeignKey("TrainingResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exercise_scores_training_result_training_result_id");

                    b.HasOne("LgymApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exercise_scores_user_user_id");

                    b.Navigation("Exercise");

                    b.Navigation("TrainingResult");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LgymApp.Domain.Entities.MainRecord", b =>
                {
                    b.HasOne("LgymApp.Domain.Entities.Exercise", "Exercise")
                        .WithOne()
                        .HasForeignKey("LgymApp.Domain.Entities.MainRecord", "ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_main_records_exercises_exercise_id");

                    b.HasOne("LgymApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_main_records_user_user_id");

                    b.Navigation("Exercise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LgymApp.Domain.Entities.Plan", b =>
                {
                    b.HasOne("LgymApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plans_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LgymApp.Domain.Entities.RecommendedNumberOfReps", b =>
                {
                    b.HasOne("LgymApp.Domain.Entities.Exercise", "Exercise")
                        .WithOne()
                        .HasForeignKey("LgymApp.Domain.Entities.RecommendedNumberOfReps", "ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_recommended_number_of_reps_exercises_exercise_id");

                    b.HasOne("LgymApp.Domain.Entities.TrainingPlan", null)
                        .WithMany("RecommendedNumberOfReps")
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_recommended_number_of_reps_training_plans_training_plan_id");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("LgymApp.Domain.Entities.TrainingPlan", b =>
                {
                    b.HasOne("LgymApp.Domain.Entities.Plan", "Plan")
                        .WithMany("TrainingsDaysPlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_training_plans_plans_plan_id");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("LgymApp.Domain.Entities.TrainingResult", b =>
                {
                    b.HasOne("LgymApp.Domain.Entities.TrainingPlan", "TrainingPlan")
                        .WithMany()
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_training_results_training_plans_training_plan_id");

                    b.HasOne("LgymApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_training_results_user_user_id");

                    b.Navigation("TrainingPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LgymApp.Domain.Entities.Plan", b =>
                {
                    b.Navigation("TrainingsDaysPlans");
                });

            modelBuilder.Entity("LgymApp.Domain.Entities.TrainingPlan", b =>
                {
                    b.Navigation("RecommendedNumberOfReps");
                });

            modelBuilder.Entity("LgymApp.Domain.Entities.TrainingResult", b =>
                {
                    b.Navigation("ExercisesScores");
                });
#pragma warning restore 612, 618
        }
    }
}
